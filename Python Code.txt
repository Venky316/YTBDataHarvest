###############################################################################################################################
##
## This contains the Python code to extract the details of Youtube Channels using Google API & display them via streamlit app
## Developer : Venkatesh Shankar
## Developed Date : 1st December 2023
## Developed Time : 2.18 P.M (IST)
## The contents of the program are subjected to copyrights.
##
###############################################################################################################################
##
## Step 1: Youtube Data Extraction of Channel Details (ID,Name,Description,Views,Subscribers,Videos)
##
###############################################################################################################################

from googleapiclient.discovery import build

# Project Number : 96540 (fully consumed)
#api_key = 'AIzaSyAyGROi-vofoTEGi41faLlR4PqkXHR3Go8'
# Project Number : 12632 (fully consumed)
#api_key = 'AIzaSyDN8MmVS4CiovF_6bcb4Jk7HuD2IDH3bl4'
# Project Number : 61727 (fully consumed)
#api_key = 'AIzaSyBfszj9zSF3-DXxl1NSFdmnuLspQk7x3WQ'
# Project Number : 24456 (fully consumed)
#api_key = 'AIzaSyBcZ8IohDMoVb1seN0KhzlWWyupsDvRb48'
# Project Number : 42222 (fully consumed)
#api_key = 'AIzaSyAVSj9E0MKQ1VEP0OxhPV8qG9BMjhk5hbY'
# Project Number : 43615 (fully consumed)
#api_key = 'AIzaSyDiTbiHviTYBQ9LnVGDZoPf4xILuliwUYc'
# Project Number : 42933 (fully consumed)
#api_key = 'AIzaSyDxgDpj1ocAhchuQDqO5KnfD5bqSxsdkmA'
# Project Number : 89975 (fully consumed)
#api_key = 'AIzaSyDjEq7F22kIfpgU7tf7IrzAtPhcaejRjUA'
# Project Number : 14912 (3775 remaining)
#api_key = 'AIzaSyBgsbOkV-p_gWoCrEbq6_EMRCeEPvuTlqo'
#Project Number : 78068 (fully consumed)
#api_key = 'AIzaSyAKaX3rCu5uT60NsTuXy3DtgqnYhu36_5Y'
#Project Number : 63763
#api_key = 'AIzaSyBSOk8AEjiDdyIbbOi1Hf5fmPR4p_NtoIo'

youtube = build('youtube', 'v3', developerKey=api_key)

channel_id_list = list()
channel_id_list.append('UCgcUFVynuKwaIZLJkjhzOVg')
channel_id_list.append('UChahm6WYl7bD1uWfNEFqcZw')
channel_id_list.append('UCHGktfcQq2BY_8tGPHwvm7g')
channel_id_list.append('UCG3B5UDD0rgEgKrpn1hZz3w')
channel_id_list.append('UCXxAaLw4mIrXC2IO0v-204A')
channel_id_list.append('UCueYcgdqos0_PzNOq81zAFg')
channel_id_list.append('UC9tnwmlNY-TWA-5RXC6D81A')
channel_id_list.append('UC5vJPQBlBYBe2mmZyLlK5Sg')
channel_id_list.append('UCa6CCFgzEe9wkh4JoQWWg-g')
channel_id_list.append('UCIyhoU4jcjFWkeelzga-2qA')

channel_list = list()
channel_genre = ['Foodie','Foodie','Receipes','Receipes','Content Reviewing','Content Reviewing','Devotional','Devotional','Sports','Sports']
for i in range(0,len(channel_id_list)):
  response = youtube.channels().list(
      id=channel_id_list[i],
      part='snippet,contentDetails,statistics'
      )
  channel_data = response.execute()
  getchannname = channel_data['items'][0]['snippet']['title']
  getchannid = channel_data['items'][0]['id']
  getchanndesc = channel_data['items'][0]['snippet']['description']
  getchannvwcount = channel_data['items'][0]['statistics']['viewCount']
  getchannsubscount = channel_data['items'][0]['statistics']['subscriberCount']
  getchannvdcount = channel_data['items'][0]['statistics']['videoCount']
  getchannthumbnail = channel_data['items'][0]['snippet']['thumbnails']['default']['url']
  getchanngenre = channel_genre[i]
  channel_dict = {'channel_id':getchannid,'channel_name':getchannname,'channel_description':getchanndesc,'channel_viewcount':getchannvwcount,'channel_subscribercount':getchannsubscount,'channel_videocount':getchannvdcount,'channel_thumbnail':getchannthumbnail,'channel_genre':getchanngenre}
  channel_list.append(channel_dict)

getchannpd = pd.DataFrame(channel_list)

###############################################################################################################################
##
## Step 2: Youtube Data Extraction of Playlist Details (ID,Title,Playlist Count) of the Channels
##
###############################################################################################################################

playlist_list = list()
for i in range(0,len(channel_id_list)):
  response = youtube.playlists().list(
      part='snippet,contentDetails',
      channelId=channel_id_list[i],
      maxResults = 5000
      )
  playlist_data = response.execute()
  if(len(playlist_data) < 5):
    getval = list(playlist_data.values())
    getval1 = getval[3]
    for k in range(0,len(getval1)):
      getnewval = getval1[k]
      getplaylistid = getnewval['id']
      getchannelid = getnewval['snippet']['channelId']
      getplaylisttit = getnewval['snippet']['title']
      getplaylistcount = getnewval['contentDetails']['itemCount']
      playlist_dict = {'channel_id':getchannelid,'playlist_id':getplaylistid,'playlist_title':getplaylisttit,'playlist_videocount':getplaylistcount}
      playlist_list.append(playlist_dict)
  else:
    getval = list(playlist_data.values())
    getval1 = getval[4]
    for k in range(0,len(getval1)):
      getnewval = getval1[k]
      getplaylistid = getnewval['id']
      getchannelid = getnewval['snippet']['channelId']
      getplaylisttit = getnewval['snippet']['title']
      getplaylistcount = getnewval['contentDetails']['itemCount']
      playlist_dict = {'channel_id':getchannelid,'playlist_id':getplaylistid,'playlist_title':getplaylisttit,'playlist_videocount':getplaylistcount}
      playlist_list.append(playlist_dict)

getplaylistpd = pd.DataFrame(playlist_list)

###############################################################################################################################
##
## Step 3: Youtube Data Extraction of main details of the videos (ID,Title,Description,PublishedAt,Duration,Caption,Views,Likes,Comments,Favorites) from the Playlists
##
###############################################################################################################################

videolist_list = list()
getpl1 = playlist_list[:142]
for i in getpl1:
  getplist = i['Playlist_ID']
  response = youtube.playlistItems().list(
      part='snippet,contentDetails',
      playlistId=getplist,
      maxResults=550
      )
  video_data = response.execute()
  if(len(video_data) < 5 ):
    getval = list(video_data.values())
    getval1 = getval[2]
    if(len(getval1) != 0):
      for k in range(0,len(getval1)):
        getnewval = getval1[k]
        getvideoid = getnewval['contentDetails']['videoId']
        getvideoname = getnewval['snippet']['title']
        getvideodesc = getnewval['snippet']['description']
        getvideoplaylist = getnewval['snippet']['playlistId']
        videodate = getnewval['snippet']['publishedAt']
        splitvideodate = videodate.split('T')
        splitdate = splitvideodate[0].split('-')
        getday = splitdate[2]
        getmon = splitdate[1]
        getyear = splitdate[0]
        getvideodate = getday + '-' + getmon + '-' + getyear
        getvideotime = splitvideodate[1].replace('Z','')
        try:
          getthumbnailurl = getnewval['snippet']['thumbnails']['default']['url']
        except:
          pass
        videolist_dict = {'Playlist_ID':getvideoplaylist,'Video_ID':getvideoid,'Video_Name':getvideoname,'Video_Description':getvideodesc,'Video_Published_Date':getvideodate,'Video_Published_Time':getvideotime,'Video_Duration':'','Video_Caption':'','Video_ViewCount':'','Video_LikeCount':'','Video_CommentCount':'','Video_FavoriteCount':''}
        videolist_list.append(videolist_dict)
  else:
    getval = list(video_data.values())
    getval1 = getval[3]
    if(len(getval1) != 0):
      for k in range(0,len(getval1)):
        getnewval = getval1[k]
        getvideoid = getnewval['contentDetails']['videoId']
        getvideoname = getnewval['snippet']['title']
        getvideodesc = getnewval['snippet']['description']
        getvideoplaylist = getnewval['snippet']['playlistId']
        videodate = getnewval['snippet']['publishedAt']
        splitvideodate = videodate.split('T')
        splitdate = splitvideodate[0].split('-')
        getday = splitdate[2]
        getmon = splitdate[1]
        getyear = splitdate[0]
        getvideodate = getday + '-' + getmon + '-' + getyear
        getvideotime = splitvideodate[1].replace('Z','')
        try:
          getthumbnailurl = getnewval['snippet']['thumbnails']['default']['url']
        except:
          pass
        videolist_dict = {'Playlist_ID':getvideoplaylist,'Video_ID':getvideoid,'Video_Name':getvideoname,'Video_Description':getvideodesc,'Video_Published_Date':getvideodate,'Video_Published_Time':getvideotime,'Video_Duration':'','Video_Caption':'','Video_ViewCount':'','Video_LikeCount':'','Video_CommentCount':'','Video_FavoriteCount':''}
        videolist_list.append(videolist_dict)

#

getpl2 = playlist_list[142:]
for i in getpl2:
  getplist = i['Playlist_ID']
  response = youtube.playlistItems().list(
      part='snippet,contentDetails',
      playlistId=getplist,
      maxResults=550
      )
  video_data = response.execute()
  if(len(video_data) < 5 ):
    getval = list(video_data.values())
    getval1 = getval[2]
    if(len(getval1) != 0):
      for k in range(0,len(getval1)):
        getnewval = getval1[k]
        getvideoid = getnewval['contentDetails']['videoId']
        getvideoname = getnewval['snippet']['title']
        getvideodesc = getnewval['snippet']['description']
        getvideoplaylist = getnewval['snippet']['playlistId']
        videodate = getnewval['snippet']['publishedAt']
        splitvideodate = videodate.split('T')
        splitdate = splitvideodate[0].split('-')
        getday = splitdate[2]
        getmon = splitdate[1]
        getyear = splitdate[0]
        getvideodate = getday + '-' + getmon + '-' + getyear
        getvideotime = splitvideodate[1].replace('Z','')
        try:
          getthumbnailurl = getnewval['snippet']['thumbnails']['default']['url']
        except:
          pass
        videolist_dict = {'Playlist_ID':getvideoplaylist,'Video_ID':getvideoid,'Video_Name':getvideoname,'Video_Description':getvideodesc,'Video_Published_Date':getvideodate,'Video_Published_Time':getvideotime,'Video_Duration':'','Video_Caption':'','Video_ViewCount':'','Video_LikeCount':'','Video_CommentCount':'','Video_FavoriteCount':''}
        videolist_list.append(videolist_dict)
  else:
    getval = list(video_data.values())
    getval1 = getval[3]
    if(len(getval1) != 0):
      for k in range(0,len(getval1)):
        getnewval = getval1[k]
        getvideoid = getnewval['contentDetails']['videoId']
        getvideoname = getnewval['snippet']['title']
        getvideodesc = getnewval['snippet']['description']
        getvideoplaylist = getnewval['snippet']['playlistId']
        videodate = getnewval['snippet']['publishedAt']
        splitvideodate = videodate.split('T')
        splitdate = splitvideodate[0].split('-')
        getday = splitdate[2]
        getmon = splitdate[1]
        getyear = splitdate[0]
        getvideodate = getday + '-' + getmon + '-' + getyear
        getvideotime = splitvideodate[1].replace('Z','')
        try:
          getthumbnailurl = getnewval['snippet']['thumbnails']['default']['url']
        except:
          pass
        videolist_dict = {'Playlist_ID':getvideoplaylist,'Video_ID':getvideoid,'Video_Name':getvideoname,'Video_Description':getvideodesc,'Video_Published_Date':getvideodate,'Video_Published_Time':getvideotime,'Video_Duration':'','Video_Caption':'','Video_ViewCount':'','Video_LikeCount':'','Video_CommentCount':'','Video_FavoriteCount':''}
        videolist_list.append(videolist_dict)

tempvideopd = pd.DataFrame(videolist_list)

#

j = 0
getvl1 = videolist_list[:1886]
for i in getvl1:
    getvidid = i['Video_ID']
    request = youtube.videos().list(
        part="snippet,contentDetails,statistics",
        id=getvidid
        )
    response = request.execute()
    try:
        vidtime = response['items'][0]['contentDetails']['duration']
        splittime = vidtime.split('M')
        if(len(splittime) < 2):
            rep1sec = splittime[0].replace('S','')
            rep2sec = rep1sec.replace('PT','')
            gettime = rep2sec + ' sec'
        else:
            repmin = splittime[0].replace('PT','')
            repsec = splittime[1].replace('S','')
            gettime = repmin + ' min ' + repsec + ' sec'
        getcaption = response['items'][0]['contentDetails']['caption']
        getvdvwcount = int(response['items'][0]['statistics']['viewCount'])
        getvdlikecount = int(response['items'][0]['statistics']['likeCount'])
        getvdcommcount = int(response['items'][0]['statistics']['commentCount'])
        getvdfavcount = int(response['items'][0]['statistics']['favoriteCount'])
    except:
        pass
    tempvideopd.loc[j,'Video_Duration'] = gettime
    tempvideopd.loc[j,'Video_Caption'] = getcaption
    tempvideopd.loc[j,'Video_ViewCount'] = getvdvwcount
    tempvideopd.loc[j,'Video_LikeCount'] = getvdlikecount
    tempvideopd.loc[j,'Video_CommentCount'] = getvdcommcount
    tempvideopd.loc[j,'Video_FavoriteCount'] = getvdfavcount
    j = j + 1

#

j = 1886
getvl2 = videolist_list[1886:]
for i in getvl2:
    getvidid = i['Video_ID']
    request = youtube.videos().list(
        part="snippet,contentDetails,statistics",
        id=getvidid
        )
    response = request.execute()
    try:
        vidtime = response['items'][0]['contentDetails']['duration']
        splittime = vidtime.split('M')
        if(len(splittime) < 2):
            rep1sec = splittime[0].replace('S','')
            rep2sec = rep1sec.replace('PT','')
            gettime = rep2sec + ' sec'
        else:
            repmin = splittime[0].replace('PT','')
            repsec = splittime[1].replace('S','')
            gettime = repmin + ' min ' + repsec + ' sec'
        getcaption = response['items'][0]['contentDetails']['caption']
        getvdvwcount = int(response['items'][0]['statistics']['viewCount'])
        getvdlikecount = int(response['items'][0]['statistics']['likeCount'])
        getvdcommcount = int(response['items'][0]['statistics']['commentCount'])
        getvdfavcount = int(response['items'][0]['statistics']['favoriteCount'])
    except:
        pass
    tempvideopd.loc[j,'Video_Duration'] = gettime
    tempvideopd.loc[j,'Video_Caption'] = getcaption
    tempvideopd.loc[j,'Video_ViewCount'] = getvdvwcount
    tempvideopd.loc[j,'Video_LikeCount'] = getvdlikecount
    tempvideopd.loc[j,'Video_CommentCount'] = getvdcommcount
    tempvideopd.loc[j,'Video_FavoriteCount'] = getvdfavcount
    j = j + 1

getvideospd = tempvideopd.copy()

###############################################################################################################################
##
## Step 4: Youtube Data Extraction of Comment Details (Comment,Author,Commented Date,Commented Time) of the videos
##
###############################################################################################################################

getlist = videolist_list
for i in getval:
    getvidid = i['Video_ID']
    request = youtube.commentThreads().list(
        part='snippet,replies',
        videoId=getvidid
        )
    try:
        response = request.execute()
    except:
        pass 
    getlist.append(response)

comment_list = list()
for i in getlist:
    getval = i['items']
    for j in range(0,len(getval)):
        getnewval = getval[j]
        getcommentid = getnewval['id']
        getvidid = getnewval['snippet']['topLevelComment']['snippet']['videoId']
        getcomment = getnewval['snippet']['topLevelComment']['snippet']['textOriginal']
        getcommentauthor = getnewval['snippet']['topLevelComment']['snippet']['authorDisplayName']
        commentdate = getnewval['snippet']['topLevelComment']['snippet']['publishedAt']
        repdate = commentdate.replace('Z','')
        splitdate = repdate.split('T')
        splitsubdate = splitdate[0].split('-')
        getday = splitsubdate[2]
        getmon = splitsubdate[1]
        getyear = splitsubdate[0]
        getcommentdate = getday + '-' + getmon + '-' + getyear
        getcommenttime = splitdate[1]     
        commentlist_dict = {'Comment_ID':getcommentid,'Video_ID':getvidid,'Comment_Text':getcomment,'Comment_Author':getcommentauthor,'Comment_Date':getcommentdate,'Comment_Time':getcommenttime}
        comment_list.append(commentlist_dict)

getcommentspd = pd.DataFrame(comment_list)

###############################################################################################################################
##
## Step 5: Import all the lists into the MongoDB
##
###############################################################################################################################

import pymongo

myclient = pymongo.MongoClient('mongodb://localhost:27017/')
channdb = myclient['ChannelDB']
channcoll = channdb['Channel_List']
for i in channel_list:
        channcoll.insert_one(i)

playlistdb = myclient['PlaylistDB']
playlistcoll = playlistdb['Playlist_List']
for i in playlist_list:
        playlistcoll.insert_one(i)

videodb = myclient['VideoDB']
videocoll = videodb['Video_List']
for i in videolist_list:
        videocoll.insert_one(i)

commentsdb = myclient['CommentsDB']
commentscoll = commentsdb['Comments_List']
for i in comment_list:
        commentscoll.insert_one(i)

###############################################################################################################################
##
## Step 6: Create SQL Tables in PGAdmin using Psycopg2
##
###############################################################################################################################

import psycopg2

conn = psycopg2.connect(host='localhost',database='postgres',user='postgres',password='Venky@24121993')
cur = conn.cursor()

createchanntable = """CREATE TABLE channtable ( 
    Channel_ID VARCHAR UNIQUE,
    Channel_Name VARCHAR,
    Channel_Description TEXT,
    Channel_ViewCount INT,
    Channel_SubscriberCount INT,
    Channel_VideoCount INT,
    Channel_Thumbnail VARCHAR,
    Channel_Genre VARCHAR,
    PRIMARY KEY(channel_id)
)
"""
cur.execute(createchanntable)

for i in getchannpd.index:
    getrow = getchannpd.iloc[i,:].to_list()
    cur.execute('INSERT INTO channtable (Channel_ID,Channel_Name,Channel_Description,Channel_ViewCount,Channel_SubscriberCount,Channel_VideoCount,Channel_Thumbnail,Channel_Genre) values (%s,%s,%s,%s,%s,%s,%s,%s)',getrow)

conn.commit()

createplaylisttable = """CREATE TABLE playlisttable ( 
    Channel_ID VARCHAR,
	Playlist_ID VARCHAR UNIQUE,
	Playlist_Title VARCHAR,
	Playlist_VideoCount INT,
	CONSTRAINT fk_channel_id
    FOREIGN KEY(channel_id)
    REFERENCES channtable(channel_id)
)
"""
cur.execute(createplaylisttable)

for i in getplaylistpd.index:
	getrow = getplaylistpd.iloc[i,:].to_list()
	getrow[-1] = str(getrow[-1])
	cur.execute('INSERT INTO playlisttable (Channel_ID,Playlist_ID,Playlist_Title,Playlist_VideoCount) values (%s,%s,%s,%s)',getrow)

conn.commit()

createvideotable = """CREATE TABLE videotable ( 
	Playlist_ID VARCHAR ,
	Video_ID VARCHAR,
	Video_Name VARCHAR,
	Video_Description TEXT,
	Video_Published_Date VARCHAR,
	Video_Published_Time VARCHAR,
	Video_Duration VARCHAR,
	Video_Caption TEXT,
	Video_ViewCount INT,
	Video_LikeCount INT,
	Video_CommentCount INT,
	Video_FavoriteCount INT,
	CONSTRAINT fk_Playlist_ID
	FOREIGN KEY(Playlist_ID)
	REFERENCES playlisttable(Playlist_ID)
)
"""
cur.execute(createvideotable)

for i in getvideospd.index:
    getrow = getvideospd.iloc[i,:].tolist()
    cur.execute('INSERT INTO videotable (Playlist_ID,Video_ID,Video_Name,Video_Description,Video_Published_Date,Video_Published_Time,Video_Duration,Video_Caption,Video_ViewCount,Video_LikeCount,Video_CommentCount,Video_FavoriteCount) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)',getrow)

conn.commit()

createcommenttable = """CREATE TABLE commenttable(
	Video_ID VARCHAR,
	Comment_ID VARCHAR,
	Comment_Text TEXT,
	Comment_Author VARCHAR,
	Comment_Date VARCHAR,
	Comment_Time VARCHAR
)
"""
cur.execute(createcommenttable)

for i in getcommentspd.index:
    getrow = getcommentspd.iloc[i,:].tolist()
    cur.execute('INSERT INTO commenttable (Video_ID,Comment_ID,Comment_Text,Comment_Author,Comment_Date,Comment_Time) values (%s,%s,%s,%s,%s,%s)',getrow)

conn.commit()

###############################################################################################################################
##
## Step 7: Create the streamlit application using Python Coding
##
###############################################################################################################################

#Import modules
import streamlit as st
import psycopg2
import pandas as pd
import matplotlib.pyplot as plt

#Set page title, heading and caption
st.set_page_config(
    page_title='Venky First App',layout='wide',initial_sidebar_state='auto',
)
gettitle = st.title(':red[Welcome to Youtube Data Harvesting]')
getcaption = st.caption(body='This app displays the details of various Youtube Channels such as Channel Details, Playlist Details, Video Details & Comment Sections.:thumbsup:')

#Select the channel genre
getgenre = st.radio(label='Select your Genre',options=['Foodie','Receipes','Content Reviewing','Devotional','Sports','All'],index = 2)

#Query SQL DB to retrieve the channels, playlists & videos table
conn = psycopg2.connect(host='localhost',database='postgres',user='postgres',password='Venky@24121993')
cur = conn.cursor()
cur.execute('select * from channtable')
row = cur.fetchall()
getchannpd = pd.DataFrame(row,columns=['Channel_ID','Channel_Name','Channel_Description','Channel_Views','Channel_Subscribers','Channel_Videos','Channel_Thumbnail','Channel_Genre'])
cur.execute('select * from channtable left join playlisttable on channtable.channel_id=playlisttable.channel_id')
row = cur.fetchall()
getplaylistpd = pd.DataFrame(row,columns=['Channel_ID','Channel_Name','Channel_Description','Channel_Views','Channel_Subscribers','Channel_Videos','Channel_Thumbnail','Channel_Genre','chann_id','Playlist_ID','Playlist_Name','Playlist_Videos'])
getdf = pd.unique(getplaylistpd['Channel_Name']).tolist()
cur.execute('select * from channtable join playlisttable on channtable.channel_id=playlisttable.channel_id join videotable on playlisttable.playlist_id=videotable.playlist_id')
row = cur.fetchall()
getvideospd = pd.DataFrame(row,columns=['Channel_ID','Channel_Name','Channel_Description','Channel_Views','Channel_Subscribers','Channel_Videos','Channel_Thumbnail','Channel_Genre','chann_id','Playlist_ID','Playlist_Name','Playlist_Videos','play_id','Video_ID','Video_Name','Video_Description','Published_Date','Published_Time','Duration','Caption','Views','Likes','Comments','Favorites'])

#Displays data for all the Channels when genre other than "All" is selected
if getgenre != 'All':
    if getgenre == 'Foodie':
        getchannloc = getchannpd.loc[getchannpd['Channel_Genre'].str.contains(getgenre)]
        getlist = getchannloc['Channel_Name'].values.tolist()
        getchannbox = st.selectbox(label='Channels',options=[getlist[0],getlist[1]],index=None)
    elif getgenre == 'Receipes':
        getchannloc = getchannpd.loc[getchannpd['Channel_Genre'].str.contains(getgenre)]
        getlist = getchannloc['Channel_Name'].values.tolist()       
        getchannbox = st.selectbox(label='Channels',options=[getlist[0],getlist[1]],index=None) 
    elif getgenre == 'Content Reviewing':
        getchannloc = getchannpd.loc[getchannpd['Channel_Genre'].str.contains(getgenre)]
        getlist = getchannloc['Channel_Name'].values.tolist()        
        getchannbox = st.selectbox(label='Channels',options=[getlist[0],getlist[1]],index=None)    
    elif getgenre == 'Devotional':
        getchannloc = getchannpd.loc[getchannpd['Channel_Genre'].str.contains(getgenre)]
        getlist = getchannloc['Channel_Name'].values.tolist()        
        getchannbox = st.selectbox(label='Channels',options=[getlist[0],getlist[1]],index=None)
    elif getgenre == 'Sports':
        getchannloc = getchannpd.loc[getchannpd['Channel_Genre'].str.contains(getgenre)]
        getlist = getchannloc['Channel_Name'].values.tolist()         
        getchannbox = st.selectbox(label='Channels',options=[getlist[0],getlist[1]],index=None)

    #Display channel name, description and no. of views, subscribers, playlists and videos along with thumbnail image
    if getchannbox:
        getchannvwcount = getchannpd.loc[getchannpd['Channel_Name'].str.contains(getchannbox),'Channel_Views'].values[0]
        getchannsubcount = getchannpd.loc[getchannpd['Channel_Name'].str.contains(getchannbox),'Channel_Subscribers'].values[0]
        getchannvidcount = getchannpd.loc[getchannpd['Channel_Name'].str.contains(getchannbox),'Channel_Videos'].values[0]
        getchanndesc = getchannpd.loc[getchannpd['Channel_Name'].str.contains(getchannbox),'Channel_Description'].values[0]
        getchannthumbnail = getchannpd.loc[getchannpd['Channel_Name'].str.contains(getchannbox),'Channel_Thumbnail'].values[0]
        st.write('Description')
        st.write(getchanndesc)
        st.write('#Channel Views : ',getchannvwcount)
        st.write('#Subscribers : ',getchannsubcount)
        st.write('#Videos : ',getchannvidcount)
        cur.execute('select * from channtable left join playlisttable on channtable.channel_id=playlisttable.channel_id')
        gettab = cur.fetchall()
        getpd = pd.DataFrame(gettab)
        getplid = getpd.loc[getpd[1].str.contains(getchannbox)].shape[0]
        st.write('#Playlists : ',getplid)
        import urllib.request
        from PIL import Image
        urllib.request.urlretrieve(getchannthumbnail,'getimage.png')
        img = Image.open('getimage.png')
        st.image(img)

#Displays data for all the Channels when genre "All" is selected
else:
    #Lists out the channel details
    st.title(':blue[Channels List]')
    #st.dataframe(getchannpd,hide_index=True)
    st.data_editor(getchannpd,column_config={'Channel_Thumbnail':st.column_config.ImageColumn()},hide_index=True,column_order=('Channel_Thumbnail','Channel_Name','Channel_Genre','Channel_Description'))

    #Statistics of the channels, playlists, videos and comments
    st.title(':blue[Channels Stats]')
    getmaxvchann = getchannpd['Channel_Views'].idxmax()
    getmaxvchannloc = getchannpd.loc[getmaxvchann]
    getmaxsubchann = getchannpd['Channel_Subscribers'].idxmax()
    getmaxsubchannloc = getchannpd.loc[getmaxsubchann]
    getmaxvdchann = getchannpd['Channel_Videos'].idxmax()
    getmaxvdchannloc = getchannpd.loc[getmaxvdchann]
    getmaxlikchann = getvideospd['Likes'].idxmax()
    getmaxlikchannloc = getvideospd.loc[getmaxlikchann]
    getmaxcommchann = getvideospd['Comments'].idxmax()
    getmaxcommchannloc = getvideospd.loc[getmaxcommchann]
    #Loop to get playlists count based on channel name
    getpd = getplaylistpd['Channel_Name'].value_counts()
    getnewpd = pd.DataFrame({'Channel_Name':getpd.index,'Playlists':getpd.values})
    getmax = getnewpd['Playlists'].max().item()
    getarr = np.where(getnewpd['Playlists'] == getmax)
    getlist = list()
    for i in getarr[0]:
        getlist.append(getnewpd.loc[i].Channel_Name)
    getstr = ' '.join(str(i) for i in getlist)

    st.write(':green[Top Viewed Channel] :sunglasses::sunglasses: :', getmaxvchannloc.Channel_Name, '(', getmaxvchannloc.Channel_Views, 'viewers )')
    st.write(':green[Top Subscribed Channel] :pray::pray: :', getmaxsubchannloc.Channel_Name, '(', getmaxsubchannloc.Channel_Subscribers, 'subscribers )')
    st.write(':green[Channel with most playlists] :open_hands::open_hands: :', getstr, '(', getmax, 'Playlists )')
    st.write(':green[Channel with most videos] :crossed_fingers::crossed_fingers: :', getmaxvdchannloc.Channel_Name, '(', getmaxvdchannloc.Channel_Videos, 'videos )') 
    st.write(':green[Channel with most likes] :thumbsup::thumbsup: :', getmaxlikchannloc.Channel_Name, '(', int(getmaxlikchannloc.Likes), 'likes )')
    st.write(':green[Channel with most comments] :speech_balloon::speech_balloon: :', getmaxcommchannloc.Channel_Name, '(', int(getmaxcommchannloc.Comments), 'comments )')  

    #Bar chart display of the Views, Subscribers, Playlists and Videos Statistics
    st.write('\n')
    st.write('\n')
    st.markdown("<h1 style='text-align: center; color: yellow; '>Viewers Stats</h1>", unsafe_allow_html=True)       
    st.bar_chart(data=getchannpd,x='Channel_Name',y='Channel_Views')
    st.write('\n')
    st.write('\n')
    st.markdown("<h1 style='text-align: center; color: yellow; '>Subscribers Stats</h1>", unsafe_allow_html=True)       
    st.bar_chart(data=getchannpd,x='Channel_Name',y='Channel_Subscribers')
    st.write('\n')
    st.write('\n')
    st.markdown("<h1 style='text-align: center; color: yellow; '>Playlists Stats</h1>", unsafe_allow_html=True)       
    st.bar_chart(data=getnewpd,x='Channel_Name',y='Playlists')    
    st.write('\n')
    st.write('\n')
    st.markdown("<h1 style='text-align: center; color: yellow; '>Videos Stats</h1>", unsafe_allow_html=True)       
    st.bar_chart(data=getchannpd,x='Channel_Name',y='Channel_Videos')

    #Questions
    st.title(':blue[Questionnaire]')
        #1st question
    st.write('1. What are the names of all the videos and their corresponding channels?')
    getonebut = st.button('Ans', key='but1')
    if(getonebut):
        getonebutdf = pd.DataFrame([getvideospd['Channel_Name'],getvideospd['Video_Name']]).T
        st.dataframe(getonebutdf)

        #2nd question
    st.write('2. Which channels have the most number of videos, and how many videos do they have?')
    gettwobut = st.button('Ans', key='but2')
    if(gettwobut):
        st.write(getmaxvdchannloc.Channel_Name, '(', getmaxvdchannloc.Channel_Videos, 'videos )')
    
        #3rd question   
    st.write('3. What are the top 10 most viewed videos and their respective channels?')
    getthreebut = st.button('Ans', key='but3')
    if(getthreebut):
        getthreebutdf = pd.DataFrame([getvideospd['Channel_Name'],getvideospd['Video_Name'],getvideospd['Views']]).T
        newpd = getthreebutdf.sort_values(by=['Views'],ascending=False,ignore_index=True)
        st.write(newpd.head(10))
    
        #4th question    
    st.write('4. How many comments were made on each video, and what are their corresponding video names?')
    getfourbut = st.button('Ans', key='but4')
    if(getfourbut):
        getfourbutdf = pd.DataFrame([getvideospd['Video_Name'],getvideospd['Comments']]).T
        st.dataframe(getfourbutdf)
    
        #5th question    
    st.write('5. Which videos have the highest number of likes, and what are their corresponding channel names?')
    getfivebut = st.button('Ans', key = 'but5')
    if(getfivebut):
        getfivbutdf = pd.DataFrame([getvideospd['Channel_Name'],getvideospd['Video_Name'],getvideospd['Likes']]).T
        getchannlist = getchannpd['Channel_Name'].values.tolist()
        getlist = list()
        for i in getchannlist:
            getnewdf = getvideospd[getvideospd['Channel_Name'].str.contains(i)]
            getfiltdf = getnewdf.replace(np.nan,0)
            getmax = getfiltdf['Likes'].idxmax()
            getlist.append([getfiltdf.loc[getmax].Channel_Name,getfiltdf.loc[getmax].Video_Name,getfiltdf.loc[getmax].Likes])
        getdf = pd.DataFrame(getlist,columns=['Channel_Name','Video_Name','Likes'])
        st.dataframe(getdf)

        #6th question
    st.write('6. What is the total number of likes for each video, and what are their corresponding video names?')
    getsixbut = st.button('Ans', key = 'but6')
    if(getsixbut):
        getsixbutdf = pd.DataFrame([getvideospd['Video_Name'],getvideospd['Likes']]).T
        st.dataframe(getsixbutdf)
    
        #7th question    
    st.write('7. What is the total number of views for each channel, and what are their corresponding channel names?')
    getsevenbut = st.button('Ans', key = 'but7')
    if(getsevenbut):
        getsevenbutdf = pd.DataFrame([getchannpd['Channel_Name'],getchannpd['Channel_Views']]).T
        st.dataframe(getsevenbutdf)
    
        #8th question    
    st.write('8. What are the names of all the channels that have published videos in the year 2022?')
    geteightbut = st.button('Ans', key = 'but8')
    if(geteightbut):
        getrecentchann = getvideospd.loc[getvideospd['Published_Date'].str.contains('2022')]
        getchann = getrecentchann['Channel_Name'].unique()
        getchanndf = pd.DataFrame(getchann,columns=['Channel Name'])
        st.dataframe(getchanndf)
    
        #9th question    
    st.write('9. What is the average duration of all videos in each channel, and what are their corresponding channel names?')
    getninebut = st.button('Ans', key='but9')

        #10th question
    st.write('10. Which videos have the highest number of comments, and what are their corresponding channel names?')
    gettenbut = st.button('Ans', key='but10')
    if(gettenbut):
        gettenbutdf = pd.DataFrame([getvideospd['Channel_Name'],getvideospd['Video_Name'],getvideospd['Comments']]).T
        getchannlist = getchannpd['Channel_Name'].values.tolist()
        getlist = list()
        for i in getchannlist:
            getnewdf = getvideospd[getvideospd['Channel_Name'].str.contains(i)]
            getfiltdf = getnewdf.replace(np.nan,0)
            getmax = getfiltdf['Comments'].idxmax()
            getlist.append([getfiltdf.loc[getmax].Channel_Name,getfiltdf.loc[getmax].Video_Name,getfiltdf.loc[getmax].Comments])
        getdf = pd.DataFrame(getlist,columns=['Channel_Name','Video_Name','Comments'])
        st.dataframe(getdf)

    #Feedback about the favourite channel       
    st.title(':blue[Rate your favourite Channel]')
    ratchann = st.multiselect(label ='Select Channels',options = getchannpd['Channel_Name'])
    getresponse = st.radio(label='Rating',options= ['Poor','Average','Good','Very Good','Excellent'],index=None)
    if(ratchann and getresponse):
        st.subheader('Thanks for submitting your response...!!')

###############################################################################################################################
##
## Step 10: Run the streamlit application using the Terminal and enjoy...!!
##
###############################################################################################################################